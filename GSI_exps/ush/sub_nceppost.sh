#!/bin/ksh
#SBATCH --time=00:30:00
#SBATCH --account=gsd-fv3-test
##SBATCH --qos=batch
#SBATCH --qos=debug
#SBATCH --output=../logs/nceppost.log
#SBATCH --partition=hera
#SBATCH --nodes=4 --ntasks-per-node=20 --cpus-per-task=1
##SBATCH --hint=nomultithread 

set -x
#--- USER EDIT DESCIPTIONS --------------------------------------------------------
# See UPP User's Guide for more information
# http://www.dtcenter.org/upp/users/docs/user_guide/V4/upp_users_guide.pdf 
#----------------------------------------------------------------------------------
# TOP_DIR       : Top level directory for source codes (UPPV4.0)
# DOMAINPATH    : Working directory for this run.
# UNIPOST_HOME  : Where the UPP build directory located
# POSTEXEC      : Where the UPP executables are located
# SCRIPTS       : Where the UPP scripts directory is (i.e. UPPV4.0/scripts/)
# modelDataPath : Where are the model data files to be processed located
#                 e.g. "wrfprd/" for WRF-based runs
#                 FV3 model filename examples (may need to alter in script) 
#                 inFileName=dynf012.nemsio (default) or gfs.t00z.atmf012.nemsio
#                 flxFileName=phyf012.nemsio (default) or gfs.t00z.sfcf012.nemsio
# paramFile     : Name and location of cntrl.parm file (wrf_cntrl.parm)
#                 Text file lists desired fields for grib1 output. Template in UPPV4.0/parm/
# txtCntrlFile  : Name and location of post flat file (postxconfig-NT.txt) for grib2
#                 Text file listing desired fields to be generated by the user before running UPP.
#                 Step 1: Edit postcntrl.xml to include desired fields (template in UPPV4.0/parm)
#                 Step 2: Validate postcntrl.xml and post_avblflds.xml
#                 Step 3: Type 'make' in parm directory to generate the post flat file
# dyncore       : What model is used ARW (WRF) or FV3 (GFS)
# inFormat      : Format of the model data 
#                 arw - "netcdf"
#                 fv3 - "binarynemsiompiio" or "netcdf"
# outFormat     : Format of output from UPP 
#                 grib (WRF only)
#                 grib2 
# startdate     : Forecast start date (YYYYMMDDHH)
# fhr           : First forecast hour to be post-processed
# lastfhr       : Last forecast hour to be post-processed
# incrementhr   : Increment (in hours) between forecast files
#                 * Do not set to 0 or the script will loop continuously *
# RUN_COMMAND   : System run command for serial or parallel runs, examples below.
#
#----------------------------------------------------------------------------------
#--- BEGIN USER EDIT HERE ---------------------------------------------------------
#----------------------------------------------------------------------------------

export TOP_DIR=/scratch1/BMC/gsd-fv3-dev/Shih-wei.Wei/SingleRadTest
export RUNDIR=${TOP_DIR}/postprd
export UNIPOST_HOME=/scratch1/BMC/gsd-fv3-dev/Shih-wei.Wei/Git/global-workflow/sorc/gfs_post.fd
export    POSTEXEC=${UNIPOST_HOME}/exec
export     SCRIPTS=${UNIPOST_HOME}/scripts
export UNIPOSTPARM=${UNIPOST_HOME}/parm
export expname="aerorad"
export atmDataPath=$TOP_DIR/OUTPUT/$expname
#export atmDataPath=$TOP_DIR/INPUTS
export sfcDataPath=$TOP_DIR/INPUTS
export NDATE=/scratch2/NCEPDEV/nwprod/NCEPLIBS/utils/prod_util.v1.1.0/exec/ndate
export savedir=$TOP_DIR/GRIBOUT/$expname

. /etc/profile
. /etc/profile.d/modules.sh
module purge
module use ${UNIPOST_HOME}/modulefiles
module load post/v8.0.0-hera
module load wgrib2/2.0.8
module list

# Specify Dyn Core (ARW or FV3 in upper case)
export dyncore="FV3"

# Set input format from model and ouput format from unipost
export inFormat="binarynemsiompiio"
export outFormat="grib2"
export PGBOUT="pgbfile.${outFormat}"
export DEG=0.5
case $DEG in
0.25)
   export IO=1440 ; export JO=720 ;;
0.5)
   export IO=720 ; export JO=360 ;;
1.)
   export IO=360  ; export JO=180 ;;
*) 
   echo "unrecognized resolution"
   exit ;;
esac

export IGEN="anal_gfs" # medium range forecast: gfs_avn 
export POSTGPVARS="KPO=57,PO=1000.,975.,950.,925.,900.,875.,850.,825.,800.,775.,750.,725.,700.,675.,650.,625.,600.,575.,550.,525.,500.,475.,450.,425.,400.,375.,350.,325.,300.,275.,250.,225.,200.,175.,150.,125.,100.,70.,50.,40.,30.,20.,15.,10.,7.,5.,3.,2.,1.,0.7,0.4,0.2,0.1,0.07,0.04,0.02,0.01,"

export    paramFile=${UNIPOST_HOME}/parm/wrf_cntrl.parm # grib1 (WRF only)
export txtCntrlFile=${UNIPOST_HOME}/parm/postxconfig-NT-GFS-ANL.txt
export   GB2toNCTBL=${TOP_DIR}/dat/GRIB2toNC.tbl

# Set date/time information
export CDATE=2020062212
   PDY=`echo $CDATE | cut -c1-8`
   cyc=`echo $CDATE | cut -c9-10`
export CDUMP='gdas'

export startfhr=00
export  lastfhr=00
export incrementhr=03

posttimelist="anl"
if [ $lastfhr -ne 00 ]; then
   fhr=$startfhr
   while [ $((10#${fhr})) -le $((10#${lastfhr})) ]; do
       fhr=`printf "%02i" ${fhr}`
       posttimelist="$posttimelist $fhr"
       fhr=$((10#${fhr}+$((${incrementhr}))))       
   done
fi

# Set run command

# Serial command example
export POSTEXEC_FILE="${POSTEXEC}/ncep_post"
export WGRIB2="$WGRIB2_ROOT/bin/wgrib2"

# Parallel command examples:
export RUN_COMMAND="srun --export=ALL ${POSTEXEC_FILE} "

export tmmark=tm00
export MP_SHARED_MEMORY=yes
export MP_LABELIO=yes

#----------------------------------------------------------------------
#--- END USER EDIT ----------------------------------------------------
#----------------------------------------------------------------------

#----------------------------------------------------------------------
# Shouldn't need to edit below unless something goes wrong or debugging
#----------------------------------------------------------------------

#----------------------------------------------------------------------
# Do some checks for directory/executable existence, user input, etc.
#----------------------------------------------------------------------
if [ ! -d ${POSTEXEC} ]; then
  echo "ERROR: POSTEXEC, '${POSTEXEC}', does not exist"
  exit 1
fi

if [ ! -x ${POSTEXEC_FILE} ]; then
  echo "ERROR: unipost.exe, '${POSTEXEC}/unipost.exe', does not exist or is not executable."
  exit 1
fi

# Set tag based on user defined $dyncore (ARW or FV3 in upper case)
if [ $dyncore = "ARW" ]; then
   export tag=NCAR
elif [ $dyncore = "FV3" ]; then
   export tag=GFS
else
    echo "${dyncore} is not supported. Edit script to choose ARW or FV3 dyncore."
    exit
fi

if [[ ${dyncore} == "ARW" ]]; then
   if [[ ${inFormat} != "netcdf" ]]; then
      echo "ERROR: 'inFormat' must be 'netcdf' for ARW model output. Exiting... "
      exit 1
   fi 
elif [ ${dyncore} == "FV3" ]; then
   if [[ ${inFormat} == "binarynemsiompiio" ]]; then
      echo "Check: You are using $dyncore $inFormat!"
   elif [[ ${inFormat} == "netcdf" ]]; then
      echo "Check: You are using $dyncore $inFormat!"
   else
      echo "ERROR: 'inFormat' must be 'binarynemsiompiio' or 'netcdf' for FV3 model output. Exiting... "
      exit 1
   fi
fi

if [[ ${outFormat} == "grib" ]]; then
   if [ ! -e ${paramFile} ]; then
      echo "ERROR: 'paramFile' not found in '${paramFile}'.  Exiting... "
      exit 1
   fi
elif [[ ${outFormat} == "grib2" ]]; then
   if [ ! -e ${txtCntrlFile} ]; then
      echo "ERROR: 'txtCntrlFile' not found in '${txtCntrlFile}'.  Exiting... "
      exit 1
   fi
fi
 
if [ ${incrementhr} -eq 0 ]; then
  echo "ERROR: increment hour (incrementhr) cannot be zero. Inifinite loop will result. Please modify. Exiting..."
  exit 1
fi

#----------------------------------------------------------------------
# End checks of user input
#----------------------------------------------------------------------

#----------------------------------------------------------------------
#  Begin work
#----------------------------------------------------------------------

# cd to working directory
if [ -d $RUNDIR ] ; then
   rm -rf $RUNDIR
   mkdir -p $RUNDIR
else
   mkdir -p $RUNDIR
fi 
cd ${RUNDIR}

# Get local copy of parm file
# For GRIB1 the code uses wrf_cntrl.parm to select variables for output
#   the available fields are set at compilation
if [[ ${outFormat} == "grib" ]]; then
    if [[ ${dyncore} == "ARW" ]]; then
	ln -fs ${paramFile} wrf_cntrl.parm
    elif [[ ${dyncore} == "FV3" ]]; then
	echo "ERROR: FV3 not available for grib1 output. Use GRIB2 output. Exiting..."
	exit 1
    fi
elif [[ ${outFormat} == "grib2" ]]; then
# For GRIB2 the code reads postxconfig-NT.txt to select variables for output
#   the available fields are defined in post_avlbflds.xml -- while we
#   set a link to this file for reading during runtime it is not typical
#   for one to update this file, therefore the link goes back to the
#   program directory - this is true for params_grib2_tbl_new also - a
#   file which defines the GRIB2 table values
ln -fs ${txtCntrlFile} postxconfig-NT.txt
ln -fs ${UNIPOSTPARM}/post_avblflds.xml post_avblflds.xml
#ln -fs ${UNIPOSTPARM}/post_avblflds_comm.xml post_avblflds.xml
ln -fs ${UNIPOSTPARM}/params_grib2_tbl_new params_grib2_tbl_new
fi

# Link microphysics tables - code will use based on mp_physics option
# found in data
ln -fs ${UNIPOSTPARM}/nam_micro_lookup.dat .
ln -fs ${UNIPOSTPARM}/hires_micro_lookup.dat .

ln -fs ${UNIPOSTPARM}/optics_luts_DUST.dat .
ln -fs ${UNIPOSTPARM}/optics_luts_SALT.dat .
ln -fs ${UNIPOSTPARM}/optics_luts_SOOT.dat .
ln -fs ${UNIPOSTPARM}/optics_luts_SUSO.dat .
ln -fs ${UNIPOSTPARM}/optics_luts_WASO.dat .
ln -fs ${UNIPOSTPARM}/AEROSOL_LUTS.dat .

# link coefficients for crtm2 (simulated synthetic satellites)
CRTMDIR=${UNIPOST_HOME}/sorc/comlibs/crtm2/src/fix
ln -fs $CRTMDIR/EmisCoeff/IR_Water/Big_Endian/Nalli.IRwater.EmisCoeff.bin           ./
ln -fs $CRTMDIR/EmisCoeff/MW_Water/Big_Endian/FASTEM4.MWwater.EmisCoeff.bin           ./
ln -fs $CRTMDIR/EmisCoeff/MW_Water/Big_Endian/FASTEM5.MWwater.EmisCoeff.bin           ./
ln -fs $CRTMDIR/EmisCoeff/MW_Water/Big_Endian/FASTEM6.MWwater.EmisCoeff.bin           ./
ln -fs $CRTMDIR/EmisCoeff/IR_Land/SEcategory/Big_Endian/NPOESS.IRland.EmisCoeff.bin           ./
ln -fs $CRTMDIR/EmisCoeff/IR_Snow/SEcategory/Big_Endian/NPOESS.IRsnow.EmisCoeff.bin           ./
ln -fs $CRTMDIR/EmisCoeff/IR_Ice/SEcategory/Big_Endian/NPOESS.IRice.EmisCoeff.bin           ./
ln -fs $CRTMDIR/AerosolCoeff/Big_Endian/AerosolCoeff.bin     ./
ln -fs $CRTMDIR/CloudCoeff/Big_Endian/CloudCoeff.bin         ./
ln -fs $CRTMDIR/SpcCoeff/Big_Endian/imgr_g11.SpcCoeff.bin    ./
ln -fs $CRTMDIR/TauCoeff/ODPS/Big_Endian/imgr_g11.TauCoeff.bin    ./
ln -fs $CRTMDIR/SpcCoeff/Big_Endian/imgr_g12.SpcCoeff.bin    ./
ln -fs $CRTMDIR/TauCoeff/ODPS/Big_Endian/imgr_g12.TauCoeff.bin    ./
ln -fs $CRTMDIR/SpcCoeff/Big_Endian/imgr_g13.SpcCoeff.bin    ./
ln -fs $CRTMDIR/TauCoeff/ODPS/Big_Endian/imgr_g13.TauCoeff.bin    ./
ln -fs $CRTMDIR/SpcCoeff/Big_Endian/imgr_g15.SpcCoeff.bin    ./
ln -fs $CRTMDIR/TauCoeff/ODPS/Big_Endian/imgr_g15.TauCoeff.bin    ./
ln -fs $CRTMDIR/SpcCoeff/Big_Endian/imgr_mt1r.SpcCoeff.bin    ./
ln -fs $CRTMDIR/TauCoeff/ODPS/Big_Endian/imgr_mt1r.TauCoeff.bin    
ln -fs $CRTMDIR/SpcCoeff/Big_Endian/imgr_mt2.SpcCoeff.bin    ./
ln -fs $CRTMDIR/TauCoeff/ODPS/Big_Endian/imgr_mt2.TauCoeff.bin    
ln -fs $CRTMDIR/SpcCoeff/Big_Endian/imgr_insat3d.SpcCoeff.bin    ./
ln -fs $CRTMDIR/TauCoeff/ODPS/Big_Endian/imgr_insat3d.TauCoeff.bin    
ln -fs $CRTMDIR/SpcCoeff/Big_Endian/amsre_aqua.SpcCoeff.bin  ./
ln -fs $CRTMDIR/TauCoeff/ODPS/Big_Endian/amsre_aqua.TauCoeff.bin  ./
ln -fs $CRTMDIR/SpcCoeff/Big_Endian/tmi_trmm.SpcCoeff.bin    ./
ln -fs $CRTMDIR/TauCoeff/ODPS/Big_Endian/tmi_trmm.TauCoeff.bin    ./
ln -fs $CRTMDIR/SpcCoeff/Big_Endian/ssmi_f13.SpcCoeff.bin    ./
ln -fs $CRTMDIR/TauCoeff/ODPS/Big_Endian/ssmi_f13.TauCoeff.bin    ./
ln -fs $CRTMDIR/SpcCoeff/Big_Endian/ssmi_f14.SpcCoeff.bin    ./
ln -fs $CRTMDIR/TauCoeff/ODPS/Big_Endian/ssmi_f14.TauCoeff.bin    ./
ln -fs $CRTMDIR/SpcCoeff/Big_Endian/ssmi_f15.SpcCoeff.bin    ./
ln -fs $CRTMDIR/TauCoeff/ODPS/Big_Endian/ssmi_f15.TauCoeff.bin    ./
ln -fs $CRTMDIR/SpcCoeff/Big_Endian/ssmis_f16.SpcCoeff.bin   ./
ln -fs $CRTMDIR/TauCoeff/ODPS/Big_Endian/ssmis_f16.TauCoeff.bin   ./
ln -fs $CRTMDIR/SpcCoeff/Big_Endian/ssmis_f17.SpcCoeff.bin   ./
ln -fs $CRTMDIR/TauCoeff/ODPS/Big_Endian/ssmis_f17.TauCoeff.bin   ./
ln -fs $CRTMDIR/SpcCoeff/Big_Endian/ssmis_f18.SpcCoeff.bin   ./
ln -fs $CRTMDIR/TauCoeff/ODPS/Big_Endian/ssmis_f18.TauCoeff.bin   ./
ln -fs $CRTMDIR/SpcCoeff/Big_Endian/ssmis_f19.SpcCoeff.bin   ./
ln -fs $CRTMDIR/TauCoeff/ODPS/Big_Endian/ssmis_f19.TauCoeff.bin   ./
ln -fs $CRTMDIR/SpcCoeff/Big_Endian/ssmis_f20.SpcCoeff.bin   ./
ln -fs $CRTMDIR/TauCoeff/ODPS/Big_Endian/ssmis_f20.TauCoeff.bin   ./
ln -fs $CRTMDIR/SpcCoeff/Big_Endian/seviri_m10.SpcCoeff.bin   ./   
ln -fs $CRTMDIR/TauCoeff/ODPS/Big_Endian/seviri_m10.TauCoeff.bin   ./
ln -fs $CRTMDIR/SpcCoeff/Big_Endian/v.seviri_m10.SpcCoeff.bin   ./   
ln -fs $CRTMDIR/TauCoeff/ODPS/Big_Endian/abi_gr.TauCoeff.bin   ./
ln -fs $CRTMDIR/SpcCoeff/Big_Endian/abi_gr.SpcCoeff.bin   ./

#######################################################
# 1. Run Unipost
#
# The Unipost is used to read native WRF model 
# output and put out isobaric state fields and derived fields.
#######################################################

for posttime in $posttimelist
do

# Formatted fhr for filenames
if [ $posttime -eq "anl" ] ; then
   fhrstr='anl'
   YY=`echo $CDATE | cut -c1-4`
   MM=`echo $CDATE | cut -c5-6`
   DD=`echo $CDATE | cut -c7-8`
   HH=`echo $CDATE | cut -c9-10`
else
   fhrstr=`printf "f%03i" ${posttime}`
   FHRDATE=`$NDATE $fhr $CDATE`
   YY=`echo $FHRDATE | cut -c1-4`
   MM=`echo $FHRDATE | cut -c5-6`
   DD=`echo $FHRDATE | cut -c7-8`
   HH=`echo $FHRDATE | cut -c9-10`
fi

# Create model file name (inFileName)
if [[ ${inFormat} == "binarynemsiompiio" ]]; then
    inFileName=${atmDataPath}/$CDATE/${CDUMP}.t${cyc}z.atm${fhrstr}.nemsio
    #inFileName=${atmDataPath}/${CDUMP}.${PDY}/${cyc}/${CDUMP}.t${cyc}z.atm${fhrstr}.nemsio
   flxFileName=${sfcDataPath}/${CDUMP}.${PDY}/${cyc}/${CDUMP}.t${cyc}z.sfc${fhrstr}.nemsio
elif [ ${inFormat} == "netcdf" ]; then
    inFileName=${modelDataPath}/gfs.t${iHH}z.atm${fhrstr}.nc
   flxFileName=${modelDataPath}/gfs.t${iHH}z.sfc${fhrstr}.nc
fi

# Check if the files exist
if [[ ! -e ${inFileName} ]]; then
   echo "ERROR: Can't find 'inFileName': ${inFileName}. Directory or file does not exist.  Exiting..."
   echo "ERROR: Check if 'modelDataPath': ${modelDataPath} exists."
   echo "ERROR: Check if file: 'dynf${fhour}.nemsio' exists in modelDataPath."
   #echo "ERROR: Check if file: 'gfs.t${iHH}z.sfcf${fhour}.nemsio' exists in modelDataPath."
   exit 1
fi

# Check if that flux file exists for FV3
if [[ ! -e ${flxFileName} ]]; then
   echo "ERROR: Can't find 'flxFileName': ${flxFileName}. Directory or file does not exist.  Exiting..."
   echo "ERROR: Check if 'modelDataPath': ${modelDataPath} exists."
   echo "ERROR: Check if file: 'phyf${fhour}.nemsio' exists in modelDataPath."
   #echo "ERROR: Check if file: 'gfs.t${iHH}z.sfcf${fhour}.nemsio' exists in modelDataPath."
   exit 1
fi
# Create itag based on user provided info. 
# Output format now set by user so if-block below uses this
# to generate the correct itag. 

ln -sf  $inFileName nemsfile
ln -sf $flxFileName  flxfile

if [[ ${outFormat} == "grib" ]]; then

cat > itag <<EOF
nemsfile
${inFormat}
${YY}-${MM}-${DD}_${HH}:00:00
${tag}
EOF

elif [[ ${outFormat} == "grib2" ]]; then

cat > itag <<EOF
nemsfile
${inFormat}
${outFormat}
${YY}-${MM}-${DD}_${HH}:00:00
${tag}
flxfile
postxconfig-NT.txt
&NAMPGB
$POSTGPVARS
/
EOF
#&NAMPGB
# fileNameAER='$inFileName',gocart_on=.true.

else
  echo "ERROR: output format 'outFormat=${outFormat}' not supported, must choose 'grib' or 'grib2'. Exiting..."
  exit 1
fi

#-----------------------------------------------------------------------
#   Run unipost.
#-----------------------------------------------------------------------
rm fort.*

ln -sf ${paramFile} fort.14

#----------------------------------------------------------------------
# There are two environment variables tmmark and COMSP
# RUN the unipost.exe executable. 
#----------------------------------------------------------------------

if [[ ${dyncore} == "ARW" ]]; then
    ${RUN_COMMAND} > unipost_${domain}.${posttime}.out 2>&1
elif [ ${dyncore} == "FV3" ]; then
    ${RUN_COMMAND} < itag > unipost.${posttime}.out 2>&1
fi

#----------------------------------------------------------------------
# DEBUG Example, uncomment below and comment ${RUN_COMMAND} line above.

# debugger runs - enter your debugger and hour of error
#if [[ $((10#${fhr})) -eq 3 ]]; then
#  mpirun.dbg.totalview -progname ${POSTEXEC}/unipost.exe > unipost_${domain}.${fhr}.out 2>&1
#else
#  mpirun -np 1 ${POSTEXEC}/unipost.exe > unipost_${domain}.${fhr}.out 2>&1
#fi
#----------------------------------------------------------------------

# This prefix was given in the wrf_cntl.parm file (GRIB1)
# or postcntrl.xml(GRIB2)

#
#----------------------------------------------------------------------
#   End of unipost job
#----------------------------------------------------------------------

# check to make sure UPP was successful and script linked the file
ls -l $PGBOUT
err1=$? 

if test "$err1" -ne 0; then
    echo 'UNIPOST FAILED, EXITTING'
    exit
fi

$WGRIB2 $PGBOUT -new_grid_winds grid -new_grid latlon 0:$IO:$DEG -90:$JO:$DEG ${PGBOUT}.tmp
rc=$?
if [ $rc -ne 0 ]; then
   echo "!!!Error: Regrid GRIB2 file failed"
   exit
fi

# Convert grib2 to netcdf with wgrib2
if [ -s $GB2toNCTBL ]; then
   ln -sf $GB2toNCTBL ./g2tonc.tbl
else
   echo "!!!Error: No table file for grib2 to netcdf"
   exit
fi
export HDF5_USE_FILE_LOCKING='FALSE'
# 2021/01/08
# Decode inventory 1 to 784 which cover most pressure level data with the postxconfig-NT-GFS-ANL.txt 
# May change to other way for the desired variables.

#$WGRIB2 -if_n 1:784:1 ${PGBOUT} -nc_table ./g2tonc.tbl -netcdf hires.pnc${fhrstr}.${CDUMP}.${CDATE}.nc4 -nc4
#rc=$?
#if [ $rc -ne 0 ]; then
#   echo "!!!Error: Convert Hi-Res GRIB2 to NetCDF4 failed"
#   exit
#fi

$WGRIB2 -if_n 1:784:1 ${PGBOUT}.tmp -nc_table ./g2tonc.tbl -netcdf pnc${fhrstr}.${CDUMP}.${CDATE}.nc4 -nc4

rc=$?
if [ $rc -ne 0 ]; then
   echo "!!!Error: Convert GRIB2 to NetCDF4 failed"
   exit
fi

if [ ! -d $savedir/$CDATE ]; then
   mkdir -p $savedir/$CDATE
fi

mv ${PGBOUT}.tmp $savedir/$CDATE/pgb${fhrstr}.${CDUMP}.${CDATE}
mv pnc${fhrstr}.${CDUMP}.${CDATE}.nc4 $savedir/$CDATE
mv hires.pnc${fhrstr}.${CDUMP}.${CDATE}.nc4 $savedir/$CDATE

done

date
echo "End of Output Job"
exit
